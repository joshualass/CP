#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <cassert>
#include <cstring>
typedef long long ll;
typedef long double ld;
using namespace std;

//commence guess-forces!

vector<array<ll,2>> a = {{0, 0}, {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {11, 11}, {22, 22}, {33, 33}, {44, 44}, {48, 12}, {55, 55}, {66, 66}, {77, 77}, {88, 88}, {99, 99}, {111, 111}, {222, 222}, {288, 18}, {333, 333}, {444, 444}, {555, 555}, {666, 666}, {777, 777}, {888, 888}, {999, 999}, {1111, 1111}, {2222, 2222}, {3333, 3333}, {3699, 27}, {4444, 4444}, {5055, 15}, {5555, 5555}, {6666, 6666}, {7077, 21}, {7777, 7777}, {8088, 24}, {8888, 8888}, {9999, 9999}, {11111, 11111}, {22222, 22222}, {33333, 33333}, {44444, 44444}, {48888, 36}, {55555, 55555}, {66666, 66666}, {77777, 77777}, {88888, 88888}, {99999, 99999}, {48, 12}, {288, 18}, {48888, 36}, {555555555, 45}, {222888888, 54}, {111888, 63}, {888888888, 72}, {999999999, 81}, {111111, 111111}, {222222, 222222}, {333333, 333333}, {444444, 444444}, {555555, 555555}, {666666, 666666}, {777777, 777777}, {888888, 888888}, {999999, 999999}, {1111111, 1111111}, {2222222, 2222222}, {3333333, 3333333}, {4444444, 4444444}, {5555555, 5555555}, {6666666, 6666666}, {7777777, 7777777}, {8888888, 8888888}, {9999999, 9999999}, {11111111, 11111111}, {22222222, 22222222}, {33333333, 33333333}, {44444444, 44444444}, {55555555, 55555555}, {66666666, 66666666}, {77777777, 77777777}, {88888888, 88888888}, {99999999, 99999999}, {111111111, 111111111}, {222222222, 222222222}, {333333333, 333333333}, {444444444, 444444444}, {555555555, 555555555}, {666666666, 666666666}, {777777777, 777777777}, {888888888, 888888888}, {999999999, 999999999}, {1111111111, 1111111111}, {2222222222, 2222222222}, {3333333333, 3333333333}, {4444444444, 4444444444}, {5555555555, 5555555555}, {6666666666, 6666666666}, {7777777777, 7777777777}, {8888888888, 8888888888}, {9999999999, 9999999999}, {11111111111, 11111111111}, {22222222222, 22222222222}, {33333333333, 33333333333}, {44444444444, 44444444444}, {55555555555, 55555555555}, {66666666666, 66666666666}, {77777777777, 77777777777}, {88888888888, 88888888888}, {99999999999, 99999999999}, {111111111111, 111111111111}, {222222222222, 222222222222}, {333333333333, 333333333333}, {444444444444, 444444444444}, {555555555555, 555555555555}, {666666666666, 666666666666}, {777777777777, 777777777777}, {888888888888, 888888888888}, {999999999999, 999999999999}, {1111111111111, 1111111111111}, {2222222222222, 2222222222222}, {3333333333333, 3333333333333}, {4444444444444, 4444444444444}, {5555555555555, 5555555555555}, {6666666666666, 6666666666666}, {7777777777777, 7777777777777}, {8888888888888, 8888888888888}, {9999999999999, 9999999999999}, {11111111111111, 11111111111111}, {22222222222222, 22222222222222}, {33333333333333, 33333333333333}, {44444444444444, 44444444444444}, {55555555555555, 55555555555555}, {66666666666666, 66666666666666}, {77777777777777, 77777777777777}, {88888888888888, 88888888888888}, {99999999999999, 99999999999999}, {111111111111111, 111111111111111}, {222222222222222, 222222222222222}, {333333333333333, 333333333333333}, {444444444444444, 444444444444444}, {555555555555555, 555555555555555}, {666666666666666, 666666666666666}, {777777777777777, 777777777777777}, {888888888888888, 888888888888888}, {999999999999999, 999999999999999}, {1111111111111111, 1111111111111111}, {2222222222222222, 2222222222222222}, {3333333333333333, 3333333333333333}, {4444444444444444, 4444444444444444}, {5555555555555555, 5555555555555555}, {6666666666666666, 6666666666666666}, {7777777777777777, 7777777777777777}, {8888888888888888, 8888888888888888}, {9999999999999999, 9999999999999999}, {11111111111111111, 11111111111111111}, {22222222222222222, 22222222222222222}, {33333333333333333, 33333333333333333}, {44444444444444444, 44444444444444444}, {55555555555555555, 55555555555555555}, {66666666666666666, 66666666666666666}, {77777777777777777, 77777777777777777}, {88888888888888888, 88888888888888888}, {99999999999999999, 99999999999999999}, {111111111111111111, 111111111111111111}, {222222222222222222, 222222222222222222}, {333333333333333333, 333333333333333333}, {444444444444444444, 444444444444444444}, {555555555555555555, 555555555555555555}, {666666666666666666, 666666666666666666}, {777777777777777777, 777777777777777777}, {888888888888888888, 888888888888888888}, {999999999999999999, 999999999999999999}};

ll solve_slow(ll z) {
    vector<ll> a;
    while(z) {
        a.push_back(z % 10);
        z /= 10;
    }
    sort(a.begin(), a.end());
    ll g = 0;
    while(1) {
        ll num = 0, p = 1;
        for(ll i = 0; i < a.size(); i++) {
            num += a[i] * p;
            p *= 10;
        }
        g = gcd(g, num);
        if(!next_permutation(a.begin(), a.end())) break;
    }
    return g;
}

ll solve_slow_v(vector<ll> a) {
    sort(a.begin(), a.end());
    ll g = 0;
    while(1) {
        ll num = 0, p = 1;
        for(ll i = 0; i < a.size(); i++) {
            num += a[i] * p;
            p *= 10;
        }
        g = gcd(g, num);
        if(!next_permutation(a.begin(), a.end())) break;
    }
    return g;
}

void solve() {
    ll n; cin >> n;

    ll res = LLONG_MAX;
    for(auto [i, g] : a) {
        if(n == g) res = min(res, i);
    }

    ll cand = 1;

    auto can_add = [&](ll x, ll y) -> bool {
        if(LLONG_MAX - x < y) return 0;
        return 1;
    };

    while(1) {
        ll c = cand;
        ll bad = 0;
        for(ll i = 0; i < 9; i++) {
            if(cand == n) res = min(res, cand);
            // cout << "cand : " << cand << "\n";
            if(can_add(c, cand)) cand += c;
            else bad = 1;
        }
        if(can_add(c, 1)) cand += 1;
        else bad = 1;
        if(bad) break;
    }

    cout << (res == LLONG_MAX ? -1 : res) << '\n';

}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    // set<ll> s;

    // for(ll i = 0; i <= 100000; i++) {
    //     ll g = solve_slow(i);
    //     if(s.count(g) == 0) {
    //         // cout << "i : " << i << " g : " << g << '\n';
    //         cout << "{" << i << ", " << g << "}, ";
    //         s.insert(g);
    //         // if(g >= 10) cout << "i : " << i << " A(i) : " << solve_slow(i) << '\n';
    //     }
    // }

    // map<ll,ll> m;

    // for(ll lo_cnt = 0; lo_cnt <= 18; lo_cnt++) {
    //     for(ll hi_cnt = 0; lo_cnt + hi_cnt <= 18; hi_cnt++) {
    //         for(ll lo = 0; lo <= 9; lo++) {
    //             for(ll hi = lo + 1; hi <= 9; hi++) {
    //                 if(lo_cnt + hi_cnt) {
    //                     vector<ll> a(lo_cnt, lo), b(hi_cnt, hi);
    //                     a.insert(a.end(), b.begin(), b.end());
    //                     ll g = solve_slow_v(a);
    //                     ll i = stoll(string(lo_cnt, '0' + lo) + string(hi_cnt, '0' + hi));
    //                     if(m.count(g) == 0) {
    //                         m[g] = i;
    //                     } else if(i < m[g]) {
    //                         m[g] = i;
    //                     }
    //                     // if(s.count(g) == 0) {
    //                         // cout << "i : " << string(lo_cnt, '0' + lo) << string(hi_cnt, '0' + hi) << " g : " << g << '\n';
    //                         // s.insert(g);
    //                     // }
    //                 }
    //             }
    //         }
    //     }
    // }

    // for(auto [k, v] : m) {
    //     if(s.count(v) == 0) {
    //         cout << "{" << v << ", " << k << "}, ";
    //     }
    // }

    ll casi; cin >> casi;
    while(casi-->0) solve();

    return 0;
}
